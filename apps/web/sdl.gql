"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type AlreadyExistError implements Error {
  message: String!
}

type Alternative {
  id: ID!
  text: String!
}

type Answer {
  id: ID!
  label: String!
  order: Int!
  points: Int!
}

type AnsweringPlayer {
  id: ID!
  text: String
}

type BaseError implements Error {
  message: String!
}

type Board {
  answersNumber: Int!
  discoveredAnswers: [GameAnswer!]!
  teams: [GameTeam!]!
}

input CreateGameInput {
  gameId: String!
  playerName: String!
  playerTeam: TeamColor!
}

interface Error {
  message: String!
}

type Game {
  id: ID!
  status: GameStatus!
  teams: [Team!]!
}

type GameAnswer {
  id: ID!
  label: String!
  order: Int!
  points: Int!
}

type GameOptions {
  id: ID!
  language: Language!
  rounds: Int!
}

enum GameStatus {
  FINISHED
  LOBBY
  WAITING_FOR_ANSWERS
  WAITING_FOR_QUESTION
}

type GameTeam {
  color: TeamColor!
  failures: Int!
  points: Int!
}

enum Language {
  EN
  PL
}

type Mutation {
  createGame(gameInput: CreateGameInput!): MutationCreateGameResult!
  joinToGame(playerName: String!, teamId: ID!): Player!
  sendAnswer(answer: String!): Boolean!
  startGame: Game!
  yieldQuestion: Question!
}

union MutationCreateGameResult = AlreadyExistError | BaseError | MutationCreateGameSuccess

type MutationCreateGameSuccess {
  data: Game!
}

type Player {
  id: ID!
  name: String!
  team: Team!
}

type Query {
  test(asd: TeamColor!): TeamColor!
}

type Question {
  id: ID!
  language: Language!
  text: String!
}

type Round {
  board: Board!
  stage: Stage!
  status: GameStatus!
}

type Stage {
  answeringPlayers: [AnsweringPlayer!]!
  question: String!
}

type Subscription {
  gameInfo(gameId: String!): Game!
  state(gameId: ID!): Round!
}

type Team {
  color: String!
  id: ID!
  players: [Player!]!
}

enum TeamColor {
  BLUE
  RED
}

