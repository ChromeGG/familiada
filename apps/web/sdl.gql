type AlreadyExistError implements Error {
  message: String!
}

type BaseError implements Error {
  message: String!
}

input CreateGameInput {
  gameId: String!
  playerName: String!
  playerTeam: TeamColor!
}

interface Error {
  message: String!
}

type Game {
  id: ID!
  status: GameStatus!
  teams: [Team!]!
}

enum GameStatus {
  FINISHED
  LOBBY
  RUNNING
}

input JoinToGameInput {
  playerName: String!
  teamId: String!
}

type Mutation {
  createGame(gameInput: CreateGameInput!): MutationCreateGameResult!
  joinToGame(joinInput: JoinToGameInput!): Game!
  sendAnswer: Float!
}

union MutationCreateGameResult =
    AlreadyExistError
  | BaseError
  | MutationCreateGameSuccess

type MutationCreateGameSuccess {
  data: Game!
}

type Player {
  id: ID!
  name: String!
  team: Team!
}

type Query {
  test(asd: TeamColor!): TeamColor!
}

type Subscription {
  players(gameId: String!): [Player!]!
}

type Team {
  id: ID!
  players: [Player!]!
  teamColor: String!
}

enum TeamColor {
  BLUE
  RED
}
