generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

generator pothos {
  provider = "prisma-pothos-types"
  output   = "../src/generated/pothos-types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TeamColor {
  RED
  BLUE
}

model Player {
  id                    Int                    @id @default(autoincrement())
  name                  String
  team                  Team                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId                Int
  gamesQuestionsPlayers GameQuestionsAnswers[]
}

model Team {
  id                    Int       @id @default(autoincrement())
  color                 TeamColor
  players               Player[]
  nextAnsweringPlayerId Int?
  game                  Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId                String
}

model Game {
  id            String          @id @unique
  status        GameStatus      @default(LOBBY)
  teams         Team[]
  rounds        Int
  gameQuestions GameQuestions[]
}

enum GameStatus {
  LOBBY
  WAITING_FOR_QUESTION
  WAITING_FOR_ANSWERS
  FINISHED
}

model GameQuestions {
  id                   Int                    @id @default(autoincrement())
  round                Int
  question             Question               @relation(fields: [questionId], references: [id])
  questionId           Int
  game                 Game                   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId               String
  gameQuestionsAnswers GameQuestionsAnswers[]

  @@unique([gameId, questionId])
  @@unique([gameId, round])
}

model GameQuestionsAnswers {
  id             Int           @id @default(autoincrement())
  gameQuestions  GameQuestions @relation(fields: [gameQuestionId], references: [id], onDelete: Cascade)
  gameQuestionId Int
  player         Player        @relation(fields: [playerId], references: [id])
  playerId       Int
  priority       Int
  text           String?
  answerId       Int?
  answer         Answer?       @relation(fields: [answerId], references: [id])

  @@unique([gameQuestionId, playerId, priority])
}

enum Language {
  PL
  EN
}

model Question {
  id            Int             @id @default(autoincrement())
  text          String
  language      Language
  gameQuestions GameQuestions[]
  answer        Answer[]
}

model Answer {
  id                   Int                    @id @default(autoincrement())
  label                String
  points               Int
  variants             Variant[]
  question             Question               @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId           Int
  gameQuestionsAnswers GameQuestionsAnswers[]
}

model Variant {
  id       Int    @id @default(autoincrement())
  text     String
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId Int
}
